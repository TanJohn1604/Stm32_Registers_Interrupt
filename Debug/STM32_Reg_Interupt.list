
STM32_Reg_Interupt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000002b8  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080003e8  080003f0  000103f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080003e8  080003e8  000103f0  2**0
                  CONTENTS
  4 .ARM          00000000  080003e8  080003e8  000103f0  2**0
                  CONTENTS
  5 .preinit_array 00000000  080003e8  080003f0  000103f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080003e8  080003e8  000103e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080003ec  080003ec  000103ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000103f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000000  080003f0  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000020  080003f0  00020020  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000103f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000814  00000000  00000000  00010419  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000001e2  00000000  00000000  00010c2d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000068  00000000  00000000  00010e10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000050  00000000  00000000  00010e78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000fd00  00000000  00000000  00010ec8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000005ec  00000000  00000000  00020bc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000535d4  00000000  00000000  000211b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00074788  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000000e4  00000000  00000000  000747dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	080003d0 	.word	0x080003d0

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	080003d0 	.word	0x080003d0

08000170 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000170:	b480      	push	{r7}
 8000172:	b083      	sub	sp, #12
 8000174:	af00      	add	r7, sp, #0
 8000176:	4603      	mov	r3, r0
 8000178:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800017a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800017e:	2b00      	cmp	r3, #0
 8000180:	db0b      	blt.n	800019a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000182:	79fb      	ldrb	r3, [r7, #7]
 8000184:	f003 021f 	and.w	r2, r3, #31
 8000188:	4906      	ldr	r1, [pc, #24]	; (80001a4 <__NVIC_EnableIRQ+0x34>)
 800018a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800018e:	095b      	lsrs	r3, r3, #5
 8000190:	2001      	movs	r0, #1
 8000192:	fa00 f202 	lsl.w	r2, r0, r2
 8000196:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800019a:	bf00      	nop
 800019c:	370c      	adds	r7, #12
 800019e:	46bd      	mov	sp, r7
 80001a0:	bc80      	pop	{r7}
 80001a2:	4770      	bx	lr
 80001a4:	e000e100 	.word	0xe000e100

080001a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80001a8:	b480      	push	{r7}
 80001aa:	b083      	sub	sp, #12
 80001ac:	af00      	add	r7, sp, #0
 80001ae:	4603      	mov	r3, r0
 80001b0:	6039      	str	r1, [r7, #0]
 80001b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80001b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001b8:	2b00      	cmp	r3, #0
 80001ba:	db0a      	blt.n	80001d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80001bc:	683b      	ldr	r3, [r7, #0]
 80001be:	b2da      	uxtb	r2, r3
 80001c0:	490c      	ldr	r1, [pc, #48]	; (80001f4 <__NVIC_SetPriority+0x4c>)
 80001c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001c6:	0112      	lsls	r2, r2, #4
 80001c8:	b2d2      	uxtb	r2, r2
 80001ca:	440b      	add	r3, r1
 80001cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80001d0:	e00a      	b.n	80001e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80001d2:	683b      	ldr	r3, [r7, #0]
 80001d4:	b2da      	uxtb	r2, r3
 80001d6:	4908      	ldr	r1, [pc, #32]	; (80001f8 <__NVIC_SetPriority+0x50>)
 80001d8:	79fb      	ldrb	r3, [r7, #7]
 80001da:	f003 030f 	and.w	r3, r3, #15
 80001de:	3b04      	subs	r3, #4
 80001e0:	0112      	lsls	r2, r2, #4
 80001e2:	b2d2      	uxtb	r2, r2
 80001e4:	440b      	add	r3, r1
 80001e6:	761a      	strb	r2, [r3, #24]
}
 80001e8:	bf00      	nop
 80001ea:	370c      	adds	r7, #12
 80001ec:	46bd      	mov	sp, r7
 80001ee:	bc80      	pop	{r7}
 80001f0:	4770      	bx	lr
 80001f2:	bf00      	nop
 80001f4:	e000e100 	.word	0xe000e100
 80001f8:	e000ed00 	.word	0xe000ed00

080001fc <main>:
void EXTI15_10_IRQHandler();



int main(void)
{
 80001fc:	b580      	push	{r7, lr}
 80001fe:	af00      	add	r7, sp, #0
	pPc13=GPIOC;
 8000200:	4b05      	ldr	r3, [pc, #20]	; (8000218 <main+0x1c>)
 8000202:	4a06      	ldr	r2, [pc, #24]	; (800021c <main+0x20>)
 8000204:	601a      	str	r2, [r3, #0]
	config_pc13();
 8000206:	f000 f80b 	bl	8000220 <config_pc13>
	GPIOC->ODR|= GPIO_ODR_ODR13;
 800020a:	4b04      	ldr	r3, [pc, #16]	; (800021c <main+0x20>)
 800020c:	68db      	ldr	r3, [r3, #12]
 800020e:	4a03      	ldr	r2, [pc, #12]	; (800021c <main+0x20>)
 8000210:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000214:	60d3      	str	r3, [r2, #12]

    /* Loop forever */
	for(;;);
 8000216:	e7fe      	b.n	8000216 <main+0x1a>
 8000218:	2000001c 	.word	0x2000001c
 800021c:	40011000 	.word	0x40011000

08000220 <config_pc13>:

}
void config_pc13(void){
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
	RCC->CR|=RCC_CR_HSEON;
 8000224:	4b28      	ldr	r3, [pc, #160]	; (80002c8 <config_pc13+0xa8>)
 8000226:	681b      	ldr	r3, [r3, #0]
 8000228:	4a27      	ldr	r2, [pc, #156]	; (80002c8 <config_pc13+0xa8>)
 800022a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800022e:	6013      	str	r3, [r2, #0]
	RCC->APB2ENR|=RCC_APB2ENR_IOPCEN;
 8000230:	4b25      	ldr	r3, [pc, #148]	; (80002c8 <config_pc13+0xa8>)
 8000232:	699b      	ldr	r3, [r3, #24]
 8000234:	4a24      	ldr	r2, [pc, #144]	; (80002c8 <config_pc13+0xa8>)
 8000236:	f043 0310 	orr.w	r3, r3, #16
 800023a:	6193      	str	r3, [r2, #24]
	RCC->APB2ENR|=RCC_APB2ENR_AFIOEN;
 800023c:	4b22      	ldr	r3, [pc, #136]	; (80002c8 <config_pc13+0xa8>)
 800023e:	699b      	ldr	r3, [r3, #24]
 8000240:	4a21      	ldr	r2, [pc, #132]	; (80002c8 <config_pc13+0xa8>)
 8000242:	f043 0301 	orr.w	r3, r3, #1
 8000246:	6193      	str	r3, [r2, #24]
	GPIOC->CRH &= ~GPIO_CRH_CNF13;
 8000248:	4b20      	ldr	r3, [pc, #128]	; (80002cc <config_pc13+0xac>)
 800024a:	685b      	ldr	r3, [r3, #4]
 800024c:	4a1f      	ldr	r2, [pc, #124]	; (80002cc <config_pc13+0xac>)
 800024e:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8000252:	6053      	str	r3, [r2, #4]
	GPIOC->CRH |= GPIO_CRH_MODE13;
 8000254:	4b1d      	ldr	r3, [pc, #116]	; (80002cc <config_pc13+0xac>)
 8000256:	685b      	ldr	r3, [r3, #4]
 8000258:	4a1c      	ldr	r2, [pc, #112]	; (80002cc <config_pc13+0xac>)
 800025a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800025e:	6053      	str	r3, [r2, #4]

	RCC->APB2ENR|=RCC_APB2ENR_IOPBEN;
 8000260:	4b19      	ldr	r3, [pc, #100]	; (80002c8 <config_pc13+0xa8>)
 8000262:	699b      	ldr	r3, [r3, #24]
 8000264:	4a18      	ldr	r2, [pc, #96]	; (80002c8 <config_pc13+0xa8>)
 8000266:	f043 0308 	orr.w	r3, r3, #8
 800026a:	6193      	str	r3, [r2, #24]
	//ngat tai pin a0
//	  uint32_t volatile *pAfioGpioA0=(uint32_t *)0x40010008;
//	  *pAfioGpioA0 |= (0x1<<0);
	 AFIO->EXTICR[3] |= AFIO_EXTICR4_EXTI14_PC;
 800026c:	4b18      	ldr	r3, [pc, #96]	; (80002d0 <config_pc13+0xb0>)
 800026e:	695b      	ldr	r3, [r3, #20]
 8000270:	4a17      	ldr	r2, [pc, #92]	; (80002d0 <config_pc13+0xb0>)
 8000272:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000276:	6153      	str	r3, [r2, #20]
	 AFIO->EXTICR[3] |= AFIO_EXTICR4_EXTI15_PC;
 8000278:	4b15      	ldr	r3, [pc, #84]	; (80002d0 <config_pc13+0xb0>)
 800027a:	695b      	ldr	r3, [r3, #20]
 800027c:	4a14      	ldr	r2, [pc, #80]	; (80002d0 <config_pc13+0xb0>)
 800027e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000282:	6153      	str	r3, [r2, #20]

	 EXTI->IMR |= EXTI_IMR_IM14;
 8000284:	4b13      	ldr	r3, [pc, #76]	; (80002d4 <config_pc13+0xb4>)
 8000286:	681b      	ldr	r3, [r3, #0]
 8000288:	4a12      	ldr	r2, [pc, #72]	; (80002d4 <config_pc13+0xb4>)
 800028a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800028e:	6013      	str	r3, [r2, #0]
	 EXTI->RTSR |= EXTI_RTSR_RT14;
 8000290:	4b10      	ldr	r3, [pc, #64]	; (80002d4 <config_pc13+0xb4>)
 8000292:	689b      	ldr	r3, [r3, #8]
 8000294:	4a0f      	ldr	r2, [pc, #60]	; (80002d4 <config_pc13+0xb4>)
 8000296:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800029a:	6093      	str	r3, [r2, #8]

	 EXTI->IMR |= EXTI_IMR_IM15;
 800029c:	4b0d      	ldr	r3, [pc, #52]	; (80002d4 <config_pc13+0xb4>)
 800029e:	681b      	ldr	r3, [r3, #0]
 80002a0:	4a0c      	ldr	r2, [pc, #48]	; (80002d4 <config_pc13+0xb4>)
 80002a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80002a6:	6013      	str	r3, [r2, #0]
	 EXTI->RTSR |= EXTI_RTSR_RT15;
 80002a8:	4b0a      	ldr	r3, [pc, #40]	; (80002d4 <config_pc13+0xb4>)
 80002aa:	689b      	ldr	r3, [r3, #8]
 80002ac:	4a09      	ldr	r2, [pc, #36]	; (80002d4 <config_pc13+0xb4>)
 80002ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80002b2:	6093      	str	r3, [r2, #8]
//	 //ringsing edge
//	  uint32_t volatile *pExtiRising=(uint32_t *)0x40010408;
//	  *pExtiRising|=(0x1<<15);

	//bat uutien ngat
	  NVIC_SetPriority(EXTI15_10_IRQn ,1);
 80002b4:	2101      	movs	r1, #1
 80002b6:	2028      	movs	r0, #40	; 0x28
 80002b8:	f7ff ff76 	bl	80001a8 <__NVIC_SetPriority>
	 //bat ngat
	  NVIC_EnableIRQ(EXTI15_10_IRQn );
 80002bc:	2028      	movs	r0, #40	; 0x28
 80002be:	f7ff ff57 	bl	8000170 <__NVIC_EnableIRQ>


}
 80002c2:	bf00      	nop
 80002c4:	bd80      	pop	{r7, pc}
 80002c6:	bf00      	nop
 80002c8:	40021000 	.word	0x40021000
 80002cc:	40011000 	.word	0x40011000
 80002d0:	40010000 	.word	0x40010000
 80002d4:	40010400 	.word	0x40010400

080002d8 <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(void){
 80002d8:	b480      	push	{r7}
 80002da:	af00      	add	r7, sp, #0
	if(EXTI->PR & (0x1<<14)){
 80002dc:	4b13      	ldr	r3, [pc, #76]	; (800032c <EXTI15_10_IRQHandler+0x54>)
 80002de:	695b      	ldr	r3, [r3, #20]
 80002e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80002e4:	2b00      	cmp	r3, #0
 80002e6:	d00b      	beq.n	8000300 <EXTI15_10_IRQHandler+0x28>
			EXTI->PR |=(0x1<<14);
 80002e8:	4b10      	ldr	r3, [pc, #64]	; (800032c <EXTI15_10_IRQHandler+0x54>)
 80002ea:	695b      	ldr	r3, [r3, #20]
 80002ec:	4a0f      	ldr	r2, [pc, #60]	; (800032c <EXTI15_10_IRQHandler+0x54>)
 80002ee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80002f2:	6153      	str	r3, [r2, #20]
			GPIOC->ODR &= ~(0x1<<13);
 80002f4:	4b0e      	ldr	r3, [pc, #56]	; (8000330 <EXTI15_10_IRQHandler+0x58>)
 80002f6:	68db      	ldr	r3, [r3, #12]
 80002f8:	4a0d      	ldr	r2, [pc, #52]	; (8000330 <EXTI15_10_IRQHandler+0x58>)
 80002fa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80002fe:	60d3      	str	r3, [r2, #12]

		}

	if(EXTI->PR & (0x1<<15)){
 8000300:	4b0a      	ldr	r3, [pc, #40]	; (800032c <EXTI15_10_IRQHandler+0x54>)
 8000302:	695b      	ldr	r3, [r3, #20]
 8000304:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000308:	2b00      	cmp	r3, #0
 800030a:	d00b      	beq.n	8000324 <EXTI15_10_IRQHandler+0x4c>
				EXTI->PR |=(0x1<<15);
 800030c:	4b07      	ldr	r3, [pc, #28]	; (800032c <EXTI15_10_IRQHandler+0x54>)
 800030e:	695b      	ldr	r3, [r3, #20]
 8000310:	4a06      	ldr	r2, [pc, #24]	; (800032c <EXTI15_10_IRQHandler+0x54>)
 8000312:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000316:	6153      	str	r3, [r2, #20]
				GPIOC->ODR |= (0x1<<13);
 8000318:	4b05      	ldr	r3, [pc, #20]	; (8000330 <EXTI15_10_IRQHandler+0x58>)
 800031a:	68db      	ldr	r3, [r3, #12]
 800031c:	4a04      	ldr	r2, [pc, #16]	; (8000330 <EXTI15_10_IRQHandler+0x58>)
 800031e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000322:	60d3      	str	r3, [r2, #12]

			}
}
 8000324:	bf00      	nop
 8000326:	46bd      	mov	sp, r7
 8000328:	bc80      	pop	{r7}
 800032a:	4770      	bx	lr
 800032c:	40010400 	.word	0x40010400
 8000330:	40011000 	.word	0x40011000

08000334 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000334:	480d      	ldr	r0, [pc, #52]	; (800036c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000336:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000338:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800033c:	480c      	ldr	r0, [pc, #48]	; (8000370 <LoopForever+0x6>)
  ldr r1, =_edata
 800033e:	490d      	ldr	r1, [pc, #52]	; (8000374 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000340:	4a0d      	ldr	r2, [pc, #52]	; (8000378 <LoopForever+0xe>)
  movs r3, #0
 8000342:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000344:	e002      	b.n	800034c <LoopCopyDataInit>

08000346 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000346:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000348:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800034a:	3304      	adds	r3, #4

0800034c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800034c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800034e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000350:	d3f9      	bcc.n	8000346 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000352:	4a0a      	ldr	r2, [pc, #40]	; (800037c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000354:	4c0a      	ldr	r4, [pc, #40]	; (8000380 <LoopForever+0x16>)
  movs r3, #0
 8000356:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000358:	e001      	b.n	800035e <LoopFillZerobss>

0800035a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800035a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800035c:	3204      	adds	r2, #4

0800035e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800035e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000360:	d3fb      	bcc.n	800035a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000362:	f000 f811 	bl	8000388 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000366:	f7ff ff49 	bl	80001fc <main>

0800036a <LoopForever>:

LoopForever:
    b LoopForever
 800036a:	e7fe      	b.n	800036a <LoopForever>
  ldr   r0, =_estack
 800036c:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8000370:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000374:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000378:	080003f0 	.word	0x080003f0
  ldr r2, =_sbss
 800037c:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000380:	20000020 	.word	0x20000020

08000384 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000384:	e7fe      	b.n	8000384 <ADC1_2_IRQHandler>
	...

08000388 <__libc_init_array>:
 8000388:	b570      	push	{r4, r5, r6, lr}
 800038a:	2600      	movs	r6, #0
 800038c:	4d0c      	ldr	r5, [pc, #48]	; (80003c0 <__libc_init_array+0x38>)
 800038e:	4c0d      	ldr	r4, [pc, #52]	; (80003c4 <__libc_init_array+0x3c>)
 8000390:	1b64      	subs	r4, r4, r5
 8000392:	10a4      	asrs	r4, r4, #2
 8000394:	42a6      	cmp	r6, r4
 8000396:	d109      	bne.n	80003ac <__libc_init_array+0x24>
 8000398:	f000 f81a 	bl	80003d0 <_init>
 800039c:	2600      	movs	r6, #0
 800039e:	4d0a      	ldr	r5, [pc, #40]	; (80003c8 <__libc_init_array+0x40>)
 80003a0:	4c0a      	ldr	r4, [pc, #40]	; (80003cc <__libc_init_array+0x44>)
 80003a2:	1b64      	subs	r4, r4, r5
 80003a4:	10a4      	asrs	r4, r4, #2
 80003a6:	42a6      	cmp	r6, r4
 80003a8:	d105      	bne.n	80003b6 <__libc_init_array+0x2e>
 80003aa:	bd70      	pop	{r4, r5, r6, pc}
 80003ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80003b0:	4798      	blx	r3
 80003b2:	3601      	adds	r6, #1
 80003b4:	e7ee      	b.n	8000394 <__libc_init_array+0xc>
 80003b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80003ba:	4798      	blx	r3
 80003bc:	3601      	adds	r6, #1
 80003be:	e7f2      	b.n	80003a6 <__libc_init_array+0x1e>
 80003c0:	080003e8 	.word	0x080003e8
 80003c4:	080003e8 	.word	0x080003e8
 80003c8:	080003e8 	.word	0x080003e8
 80003cc:	080003ec 	.word	0x080003ec

080003d0 <_init>:
 80003d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003d2:	bf00      	nop
 80003d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003d6:	bc08      	pop	{r3}
 80003d8:	469e      	mov	lr, r3
 80003da:	4770      	bx	lr

080003dc <_fini>:
 80003dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003de:	bf00      	nop
 80003e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003e2:	bc08      	pop	{r3}
 80003e4:	469e      	mov	lr, r3
 80003e6:	4770      	bx	lr
